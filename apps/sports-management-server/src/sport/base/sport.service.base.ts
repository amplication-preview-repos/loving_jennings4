/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sport as PrismaSport,
  Team as PrismaTeam,
} from "@prisma/client";

export class SportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SportCountArgs, "select">): Promise<number> {
    return this.prisma.sport.count(args);
  }

  async sports<T extends Prisma.SportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SportFindManyArgs>
  ): Promise<PrismaSport[]> {
    return this.prisma.sport.findMany<Prisma.SportFindManyArgs>(args);
  }
  async sport<T extends Prisma.SportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SportFindUniqueArgs>
  ): Promise<PrismaSport | null> {
    return this.prisma.sport.findUnique(args);
  }
  async createSport<T extends Prisma.SportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SportCreateArgs>
  ): Promise<PrismaSport> {
    return this.prisma.sport.create<T>(args);
  }
  async updateSport<T extends Prisma.SportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SportUpdateArgs>
  ): Promise<PrismaSport> {
    return this.prisma.sport.update<T>(args);
  }
  async deleteSport<T extends Prisma.SportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SportDeleteArgs>
  ): Promise<PrismaSport> {
    return this.prisma.sport.delete(args);
  }

  async findTeams(
    parentId: string,
    args: Prisma.TeamFindManyArgs
  ): Promise<PrismaTeam[]> {
    return this.prisma.sport
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .teams(args);
  }
}
