/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SportService } from "../sport.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SportCreateInput } from "./SportCreateInput";
import { Sport } from "./Sport";
import { SportFindManyArgs } from "./SportFindManyArgs";
import { SportWhereUniqueInput } from "./SportWhereUniqueInput";
import { SportUpdateInput } from "./SportUpdateInput";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { TeamWhereUniqueInput } from "../../team/base/TeamWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SportControllerBase {
  constructor(
    protected readonly service: SportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sport })
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSport(@common.Body() data: SportCreateInput): Promise<Sport> {
    return await this.service.createSport({
      data: data,
      select: {
        createdAt: true,
        id: true,
        isMultiplayer: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Sport] })
  @ApiNestedQuery(SportFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sports(@common.Req() request: Request): Promise<Sport[]> {
    const args = plainToClass(SportFindManyArgs, request.query);
    return this.service.sports({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isMultiplayer: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sport(
    @common.Param() params: SportWhereUniqueInput
  ): Promise<Sport | null> {
    const result = await this.service.sport({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isMultiplayer: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSport(
    @common.Param() params: SportWhereUniqueInput,
    @common.Body() data: SportUpdateInput
  ): Promise<Sport | null> {
    try {
      return await this.service.updateSport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          isMultiplayer: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSport(
    @common.Param() params: SportWhereUniqueInput
  ): Promise<Sport | null> {
    try {
      return await this.service.deleteSport({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isMultiplayer: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/teams")
  @ApiNestedQuery(TeamFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async findTeams(
    @common.Req() request: Request,
    @common.Param() params: SportWhereUniqueInput
  ): Promise<Team[]> {
    const query = plainToClass(TeamFindManyArgs, request.query);
    const results = await this.service.findTeams(params.id, {
      ...query,
      select: {
        admin: true,
        createdAt: true,
        id: true,
        name: true,

        sport: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "update",
    possession: "any",
  })
  async connectTeams(
    @common.Param() params: SportWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        connect: body,
      },
    };
    await this.service.updateSport({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "update",
    possession: "any",
  })
  async updateTeams(
    @common.Param() params: SportWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        set: body,
      },
    };
    await this.service.updateSport({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "update",
    possession: "any",
  })
  async disconnectTeams(
    @common.Param() params: SportWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        disconnect: body,
      },
    };
    await this.service.updateSport({
      where: params,
      data,
      select: { id: true },
    });
  }
}
