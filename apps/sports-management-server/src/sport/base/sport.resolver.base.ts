/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Sport } from "./Sport";
import { SportCountArgs } from "./SportCountArgs";
import { SportFindManyArgs } from "./SportFindManyArgs";
import { SportFindUniqueArgs } from "./SportFindUniqueArgs";
import { CreateSportArgs } from "./CreateSportArgs";
import { UpdateSportArgs } from "./UpdateSportArgs";
import { DeleteSportArgs } from "./DeleteSportArgs";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { SportService } from "../sport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sport)
export class SportResolverBase {
  constructor(
    protected readonly service: SportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "read",
    possession: "any",
  })
  async _sportsMeta(
    @graphql.Args() args: SportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sport])
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "read",
    possession: "any",
  })
  async sports(@graphql.Args() args: SportFindManyArgs): Promise<Sport[]> {
    return this.service.sports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "read",
    possession: "own",
  })
  async sport(
    @graphql.Args() args: SportFindUniqueArgs
  ): Promise<Sport | null> {
    const result = await this.service.sport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sport)
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "create",
    possession: "any",
  })
  async createSport(@graphql.Args() args: CreateSportArgs): Promise<Sport> {
    return await this.service.createSport({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sport)
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "update",
    possession: "any",
  })
  async updateSport(
    @graphql.Args() args: UpdateSportArgs
  ): Promise<Sport | null> {
    try {
      return await this.service.updateSport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sport)
  @nestAccessControl.UseRoles({
    resource: "Sport",
    action: "delete",
    possession: "any",
  })
  async deleteSport(
    @graphql.Args() args: DeleteSportArgs
  ): Promise<Sport | null> {
    try {
      return await this.service.deleteSport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Team], { name: "teams" })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async findTeams(
    @graphql.Parent() parent: Sport,
    @graphql.Args() args: TeamFindManyArgs
  ): Promise<Team[]> {
    const results = await this.service.findTeams(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
