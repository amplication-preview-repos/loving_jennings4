/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Rank as PrismaRank, Team as PrismaTeam } from "@prisma/client";

export class RankServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RankCountArgs, "select">): Promise<number> {
    return this.prisma.rank.count(args);
  }

  async ranks<T extends Prisma.RankFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RankFindManyArgs>
  ): Promise<PrismaRank[]> {
    return this.prisma.rank.findMany<Prisma.RankFindManyArgs>(args);
  }
  async rank<T extends Prisma.RankFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RankFindUniqueArgs>
  ): Promise<PrismaRank | null> {
    return this.prisma.rank.findUnique(args);
  }
  async createRank<T extends Prisma.RankCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RankCreateArgs>
  ): Promise<PrismaRank> {
    return this.prisma.rank.create<T>(args);
  }
  async updateRank<T extends Prisma.RankUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RankUpdateArgs>
  ): Promise<PrismaRank> {
    return this.prisma.rank.update<T>(args);
  }
  async deleteRank<T extends Prisma.RankDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RankDeleteArgs>
  ): Promise<PrismaRank> {
    return this.prisma.rank.delete(args);
  }

  async getTeam(parentId: string): Promise<PrismaTeam | null> {
    return this.prisma.rank
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
